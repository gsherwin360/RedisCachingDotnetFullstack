@page "/editgame"
@page "/editgame/{id:int}"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenresClient GenresClient

<PageTitle>@title</PageTitle>
<h3>@title</h3>

@if(genres is null || game is null)
{
    <p><em>Loading...</em></p>
} 
else
{
	<div class="row">
		<div class="col-md-4">
			<EditForm Model="@game" FormName="editGame" OnValidSubmit="HandleSubmitAsync" Enhance>
				<DataAnnotationsValidator />
				<div class="mb-3">
					<label for="name" class="form-label">Name</label>
					<InputText id="name" @bind-Value="game.Name" class="form-control" />
					<ValidationMessage For="() => game.Name" />
				</div>
				<div class="mb-3">
					<label for="genre" class="form-label">Genre</label>
					<InputSelect id="genre" @bind-Value="game.GenreId" class="form-select">
						<option value="">Select a genre</option>
						@foreach(var genre in genres)
						{
							<option value="@genre.Id">@genre.Name</option>
						}
					</InputSelect>
					<ValidationMessage For="() => game.GenreId" />
				</div>
				<div class="mb-3">
					<label for="price" class="form-label">Price</label>
					<InputNumber id="price" @bind-Value="game.Price" class="form-control" />
					<ValidationMessage For="() => game.Price" />
				</div>
				<div class="mb-3">
					<label for="releaseDate" class="form-label">Release Date</label>
					<InputDate id="releaseDate" @bind-Value="game.ReleaseDate" class="form-control" />
				</div>
				<button type="submit" class="btn btn-primary">Save</button>
				<a href="/" role="button" class="btn btn-secondary">Cancel</a>
			</EditForm>
		</div>
	</div>
}

@code {
	[Parameter]
	public int Id { get; set; }

	[SupplyParameterFromForm]
	private GameDetails? game { get; set; }
	private Genre[]? genres;

	private string title { get; set; } = string.Empty;

	protected override async Task OnParametersSetAsync()
	{
		game = await GamesClient.GetGameAsync(Id);
		title = $"Edit {game.Name}";
		genres = await GenresClient.GetGenresAsync();
	}

	private async Task HandleSubmitAsync()
	{
		ArgumentNullException.ThrowIfNull(game);
		await GamesClient.UpdateGameAsync(game);
		NavigationManager.NavigateTo("/");
	}
}